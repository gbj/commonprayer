use std::str::FromStr;

use serde::{Deserialize, Serialize};
use strum_macros::{AsRefStr, Display, EnumIter, EnumString, IntoStaticStr};

use crate::holy_day::HolyDayId;
use crate::lff2018::LFF_BIOS;
use crate::LiturgicalWeek;

pub use crate::bcp1979::BCP1979_FEASTS;
pub use crate::lff2018::LFF2018_FEASTS;

/// Returns the biography for the given feast day.
/// ```
/// # use crate::calendar::{Feast, feasts::{bio_for_feast}};
/// let bio = bio_for_feast(Feast::ChristmasDay);
/// assert!(bio.is_some());
/// assert!(bio.unwrap().starts_with("That Jesus was born is a fact both of history and revelation."));
/// ```
pub fn bio_for_feast(feast: Feast) -> Option<&'static str> {
    LFF_BIOS
        .iter()
        .find(|(f, _)| *f == feast)
        .map(|(_, bio)| *bio)
}

#[derive(
    Copy,
    Clone,
    PartialEq,
    Eq,
    Hash,
    Debug,
    Serialize,
    Deserialize,
    EnumString,
    Display,
    AsRefStr,
    IntoStaticStr,
    EnumIter,
)]
pub enum Feast {
    // Special Days
    FridayAfterAscension,
    FridayInEasterWeek,
    GoodFriday,
    FridayAfterAshWednesday,
    MondayInEasterWeek,
    MondayInHolyWeek,
    SaturdayAfterAscension,
    EveOfPentecost,
    SaturdayInEasterWeek,
    HolySaturday,
    SaturdayAfterAshWednesday,
    PalmSunday,
    Pentecost,
    EveOfTrinitySunday,
    TrinitySunday,
    ThanksgivingDay,
    AscensionDay,
    ThursdayInEasterWeek,
    MaundyThursday,
    ThursdayAfterAshWednesday,
    TuesdayInEasterWeek,
    TuesdayInHolyWeek,
    EveOfTheAscension,
    WednesdayInEasterWeek,
    WednesdayInHolyWeek,
    AshWednesday,
    EasterSunday,
    LaborDay,
    EmberDay,
    RogationDay,
    // Additional RCL selections for special services on select feast days
    ChristmasDayII,
    ChristmasDayIII,
    EasterVigil,
    PentecostVigil,
    LiturgyOfThePalms,
    EasterDayEveningService,
    // Saints' Days
    AbsalomJones,
    AdelaideTeagueCase,
    AelredOfRievaulx,
    AgathaOfSicily,
    AgnesAndCeciliaOfRome,
    AgnesAgathaLucy,
    AidanOfLindisfarne,
    Alban,
    AlcuinOfYork,
    AlexanderCrummell,
    Alfred,
    AllSaintsDay,
    AllSoulsDay,
    Alphege,
    AmbroseOfMilan,
    Ammonius,
    AnnaEllisonButlerAlexander,
    AnnaJuliaHaywoodCooper,
    AnselmOfCanterbury,
    Anskar,
    AntonyOfEgypt,
    ArgulaVonGrumbach,
    AthanasiusOfAlexandria,
    AugustineOfCanterbury,
    AugustineOfHippo,
    Bakhita,
    BasilOfCaesarea,
    Bede,
    BenedictOfNursia,
    BernardMizeki,
    BernardOfClairvaux,
    BirgittaOfSweden,
    BlandinaAndHerCompanions,
    Boniface,
    BrigidOfKildare,
    CatherineBarbaraMargaret,
    CatherineOfGenoa,
    CatherineOfSiena,
    ChadOfLichfield,
    ChanningMooreWilliams,
    CharlesDeFoucauld,
    CharlesHenryBrent,
    CharlesSimeon,
    ClareOfAssisi,
    ClementOfAlexandria,
    ClementOfRome,
    CliveStaplesLewis,
    ColumbaOfIona,
    CorneliusTheCenturion,
    Cuthbert,
    CyprianOfCarthage,
    CyrilAndMethodius,
    CyrilOfJerusalem,
    DamienAndMarianne,
    DavidOfWales,
    DavidPendletonOakerhater,
    DietrichBonhoeffer,
    Dominic,
    DorothyLSayers,
    Dunstan,
    EdithCavell,
    EdithSteinTeresaBenedictaOfTheCross,
    Edmund,
    EdwardBouveriePusey,
    ElisabethCruciger,
    ElizabethAnnSeton,
    StantonBloomerTruthTubman,
    ElizabethOfHungary,
    EmilyMalboneMorgan,
    Enmegahbowh,
    EphremOfNisibis,
    EuphrosynesmaragdusOfAlexandria,
    EvaLeeMatthews,
    EvelynUnderhill,
    EveOfAllSaints,
    Fabian,
    FlorenceLiTimOi,
    FlorenceNightingale,
    FrancesPerkins,
    FrancisDeSalesJaneDeChantal,
    FrancisOfAssisi,
    FrancisXavier,
    FrederickDenisonMaurice,
    FrederickDouglass,
    GeorgeAugustusSelwyn,
    GeorgeHerbert,
    GregoryOfNazianzus,
    GregoryOfNyssa,
    GregoryTheGreat,
    GregoryTheIlluminator,
    HadewijchOfBrabant,
    HannahMore,
    HarrietBedell,
    HarrietMonsell,
    HarrietStarrCannon,
    HelenaOfConstantinople,
    HenryMartyn,
    HermanOfAlaska,
    HilaryOfPoitiers,
    HildaOfWhitby,
    HildegardOfBingen,
    HolyCross,
    HolyInnocents,
    LatimerRidleyCranmer,
    HughOfLincoln,
    IgnatiusOfAntioch,
    IgnatiusOfLoyola,
    July4,
    IrenaeusOfLyons,
    IsabelFlorenceHapgood,
    JacksonKemper,
    JamesDeKoven,
    JamesHannington,
    JamesLloydBreck,
    JamesOtisSargentHuntington,
    JamesSolomonRussell,
    JamesTheodoreHolly,
    JananiLuwum,
    JeremyTaylor,
    Jerome,
    JoannaMarySalome,
    JohannArndtAndJacobBoehme,
    JohannSebasatianBach,
    JohnAndCharlesWesley,
    JohnCassian,
    JohnChrysostom,
    JohnColeridgePatteson,
    JohnDonne,
    JohnHenryHobart,
    JohnKeble,
    JohnMasonNeale,
    JohnOfDamascus,
    JohnOfTheCross,
    JohnRaleighMott,
    JohnXxiiiAngeloGiuseppeRoncalli,
    JonathanMyrickDaniels,
    JosephButler,
    JosephOfArimathea,
    JuanaInesDeLaCruz,
    JuliaChesterEmery,
    JulianOfNorwich,
    Justin,
    KamehamehaAndEmma,
    Kassiani,
    KateriTekakwitha,
    KatharinaVonBora,
    KatharinaZell,
    LancelotAndrewes,
    LaurenceOfRome,
    LeoOfRome,
    Louis,
    LucyOfSyracuse,
    LydiaOfThyatira,
    MacrinaOfCaesarea,
    MancheMasemola,
    MarcellaOfRome,
    MargaretOfCortona,
    MargaretOfScotland,
    WardClitherowLine,
    MariaSkobtsova,
    MarinaTheMonk,
    MartinLuther,
    MartinLutherKing,
    MartinOfTours,
    MartyrsOfTheReformationEra,
    MaryAndMarthaOfBethany,
    MaryOfEgypt,
    MaryamOfQidun,
    MechthildOfMagdeburg,
    MechthildeAndGertude,
    MelaniaTheElder,
    Monica,
    MosesTheBlack,
    NicholasFerrar,
    NicholasOfMyra,
    Ninian,
    NinoOfGeorgia,
    OscarRomero,
    PachomiusOfTabenissi,
    PatrickOfIreland,
    PaulJones,
    PaulaAndEustochium,
    PauliMurray,
    PerpetuaAndFelicity,
    PeterWilliamsCassey,
    PhilanderChase,
    Philip,
    PhillipsBrooks,
    Phoebe,
    Photini,
    PolycarpOfSmyrna,
    PriscillaAndAquila,
    RemigiusOfRheims,
    RichardHooker,
    RichardMeuxBensonAndCharlesGore,
    RichardOfChichester,
    RolleHiltonKempe,
    RobertGrosseteste,
    Andrew,
    Barnabas,
    Bartholomew,
    JamesOfJerusalem,
    James,
    John,
    Joseph,
    Luke,
    Mark,
    MaryMagdalene,
    Mary,
    Matthew,
    Matthias,
    Michael,
    SimonAndJude,
    Stephen,
    Thomas,
    SamuelIsaacJosephScherechewsky,
    SarahTheodoraSyncletica,
    ScholasticaOfNursia,
    SergiusOfRadonezh,
    TabithaDorcasOfJoppa,
    TeresaOfAvila,
    Annunciation,
    PeterAndPaul,
    PhilipAndJames,
    TheBeheadingOfSaintJohnTheBaptist,
    ConfessionOfStPeter,
    SamuelSeabury,
    ConversionOfStPaul,
    Epiphany,
    EveOfHolyName,
    HolyName,
    TheMartyrsOfJapan,
    TheMartyrsOfMemphis,
    TheMartyrsOfNewGuinea,
    TheMartyrsOfUganda,
    ChristmasDay,
    NativityOfStJohnTheBaptist,
    TheNativityOfTheBlessedVirginMary,
    TheParentsOfTheBlessedVirginMary,
    ThePresentation,
    TheTransfiguration,
    TheVisitation,
    TheclaOfIconium,
    Theodora,
    TheodoreOfTarsus,
    ThereseOfLisieux,
    ThomasAKempis,
    ThomasAquinas,
    ThomasBecket,
    ThomasBray,
    ThomasGallaudetAndHenryWinterSyle,
    ThomasKen,
    ThurgoodMarshall,
    Tikhon,
    TitusAndTimothy,
    ToyohikoKagawa,
    VidaDuttonScudder,
    VincentDePaul,
    VincentOfSaragossa,
    WilliamAugustusMuhlenberg,
    WilliamLaud,
    WilliamLaw,
    WilliamPorcherDubose,
    WilliamReedHuntington,
    WilliamTemple,
    WilliamTyndale,
    WilliamWhite,
    WilliamWilberforce,
    Willibrord,
    WulfstanOfWorcester,
    ZenaidaPhilonellaHermione,
    ZitaOfTuscany,
    ChristmasEve,
    December24,
    December29,
    December30,
    December31,
    EveOfHolyCross,
    EveOfStJohnTheBaptist,
    EveOfTheAnnunciation,
    EveOfThePresentation,
    EveOfTheTransfiguration,
    EveOfTheVisitation,
    IndependenceDay,
    January10,
    January11,
    January12,
    January2,
    January3,
    January4,
    January5,
    EveOfEpiphany,
    January7,
    January8,
    January9,
    EveOfEpiphany1,
}

#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Serialize, Deserialize)]
pub enum CommonOfSaints {
    Martyr,
    Missionary,
    Pastor,
    Theologian,
    Monastic,
    Saint,
}

#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, Serialize, Deserialize)]
pub enum Time {
    MorningOnly,
    AllDay,
    EveningOnly(Option<Feast>),
}

#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum TimeOfDay {
    Morning,
    Evening,
}

impl std::fmt::Display for TimeOfDay {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            TimeOfDay::Morning => f.write_str("morning"),
            TimeOfDay::Evening => f.write_str("evening"),
        }
    }
}

impl FromStr for TimeOfDay {
    type Err = ();

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        match s {
            "morning" => Ok(Self::Morning),
            "evening" => Ok(Self::Evening),
            _ => Err(()),
        }
    }
}

impl Default for TimeOfDay {
    fn default() -> Self {
        Self::Morning
    }
}

/// (month, day, Feast, eve, not observed After this week begins (used for days between Epiphany and Epiphany 1))
pub type KalendarEntry = (HolyDayId, Feast, Time, Option<LiturgicalWeek>);
