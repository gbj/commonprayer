// Tests were auto-generated by testing 3 years worth of data against Venite.app lectionary data
#[cfg(test)]
mod tests {
    use calendar::{
        Date, Feast, LiturgicalDayId, LiturgicalWeek, Proper, Weekday, BCP1979_CALENDAR,
    };
    #[test]
    fn test_calendar_for_2021_11_10() {
        let date = Date::from_ymd(2021, 11, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_11() {
        let date = Date::from_ymd(2021, 11, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_12() {
        let date = Date::from_ymd(2021, 11, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_13() {
        let date = Date::from_ymd(2021, 11, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_14() {
        let date = Date::from_ymd(2021, 11, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_15() {
        let date = Date::from_ymd(2021, 11, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_16() {
        let date = Date::from_ymd(2021, 11, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_17() {
        let date = Date::from_ymd(2021, 11, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_18() {
        let date = Date::from_ymd(2021, 11, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_19() {
        let date = Date::from_ymd(2021, 11, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_20() {
        let date = Date::from_ymd(2021, 11, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_21() {
        let date = Date::from_ymd(2021, 11, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_22() {
        let date = Date::from_ymd(2021, 11, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_23() {
        let date = Date::from_ymd(2021, 11, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_24() {
        let date = Date::from_ymd(2021, 11, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_25() {
        let date = Date::from_ymd(2021, 11, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThanksgivingDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThanksgivingDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_26() {
        let date = Date::from_ymd(2021, 11, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_27() {
        let date = Date::from_ymd(2021, 11, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_28() {
        let date = Date::from_ymd(2021, 11, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_29() {
        let date = Date::from_ymd(2021, 11, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_11_30() {
        let date = Date::from_ymd(2021, 11, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Andrew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Andrew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_1() {
        let date = Date::from_ymd(2021, 12, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_2() {
        let date = Date::from_ymd(2021, 12, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_3() {
        let date = Date::from_ymd(2021, 12, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_4() {
        let date = Date::from_ymd(2021, 12, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_5() {
        let date = Date::from_ymd(2021, 12, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_6() {
        let date = Date::from_ymd(2021, 12, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_7() {
        let date = Date::from_ymd(2021, 12, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_8() {
        let date = Date::from_ymd(2021, 12, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_9() {
        let date = Date::from_ymd(2021, 12, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_10() {
        let date = Date::from_ymd(2021, 12, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_11() {
        let date = Date::from_ymd(2021, 12, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_12() {
        let date = Date::from_ymd(2021, 12, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_13() {
        let date = Date::from_ymd(2021, 12, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_14() {
        let date = Date::from_ymd(2021, 12, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_15() {
        let date = Date::from_ymd(2021, 12, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_16() {
        let date = Date::from_ymd(2021, 12, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_17() {
        let date = Date::from_ymd(2021, 12, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_18() {
        let date = Date::from_ymd(2021, 12, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_19() {
        let date = Date::from_ymd(2021, 12, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_20() {
        let date = Date::from_ymd(2021, 12, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_21() {
        let date = Date::from_ymd(2021, 12, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Thomas));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Thomas));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_22() {
        let date = Date::from_ymd(2021, 12, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_23() {
        let date = Date::from_ymd(2021, 12, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_24() {
        let date = Date::from_ymd(2021, 12, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December24));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ChristmasEve)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_25() {
        let date = Date::from_ymd(2021, 12, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ChristmasDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ChristmasDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_26() {
        let date = Date::from_ymd(2021, 12, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Christmas1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Christmas1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_27() {
        let date = Date::from_ymd(2021, 12, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::Stephen)
        );
        assert_eq!(morning.alternate, Some(LiturgicalDayId::Feast(Feast::John)));
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::Stephen)
        );
        assert_eq!(evening.alternate, Some(LiturgicalDayId::Feast(Feast::John)));
    }
    #[test]
    fn test_calendar_for_2021_12_28() {
        let date = Date::from_ymd(2021, 12, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::John)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::Feast(Feast::HolyInnocents))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::John)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::HolyInnocents))
        );
    }
    #[test]
    fn test_calendar_for_2021_12_29() {
        let date = Date::from_ymd(2021, 12, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::HolyInnocents)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::Feast(Feast::December29))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::HolyInnocents)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::December29))
        );
    }
    #[test]
    fn test_calendar_for_2021_12_30() {
        let date = Date::from_ymd(2021, 12, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December30));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::December30));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2021_12_31() {
        let date = Date::from_ymd(2021, 12, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December31));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfHolyName)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_1() {
        let date = Date::from_ymd(2022, 1, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::HolyName));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::HolyName));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_2() {
        let date = Date::from_ymd(2022, 1, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Christmas2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Christmas2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_3() {
        let date = Date::from_ymd(2022, 1, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January3));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January3));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_4() {
        let date = Date::from_ymd(2022, 1, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January4));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January4));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_5() {
        let date = Date::from_ymd(2022, 1, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January5));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfEpiphany)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_6() {
        let date = Date::from_ymd(2022, 1, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Epiphany));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Epiphany));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_7() {
        let date = Date::from_ymd(2022, 1, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January7));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January7));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_8() {
        let date = Date::from_ymd(2022, 1, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January8));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfEpiphany1)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_9() {
        let date = Date::from_ymd(2022, 1, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_10() {
        let date = Date::from_ymd(2022, 1, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_11() {
        let date = Date::from_ymd(2022, 1, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_12() {
        let date = Date::from_ymd(2022, 1, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_13() {
        let date = Date::from_ymd(2022, 1, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_14() {
        let date = Date::from_ymd(2022, 1, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_15() {
        let date = Date::from_ymd(2022, 1, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_16() {
        let date = Date::from_ymd(2022, 1, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_17() {
        let date = Date::from_ymd(2022, 1, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_18() {
        let date = Date::from_ymd(2022, 1, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ConfessionOfStPeter)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ConfessionOfStPeter)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_19() {
        let date = Date::from_ymd(2022, 1, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_20() {
        let date = Date::from_ymd(2022, 1, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_21() {
        let date = Date::from_ymd(2022, 1, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_22() {
        let date = Date::from_ymd(2022, 1, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_23() {
        let date = Date::from_ymd(2022, 1, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_24() {
        let date = Date::from_ymd(2022, 1, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_25() {
        let date = Date::from_ymd(2022, 1, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ConversionOfStPaul)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ConversionOfStPaul)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_26() {
        let date = Date::from_ymd(2022, 1, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_27() {
        let date = Date::from_ymd(2022, 1, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_28() {
        let date = Date::from_ymd(2022, 1, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_29() {
        let date = Date::from_ymd(2022, 1, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_30() {
        let date = Date::from_ymd(2022, 1, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_1_31() {
        let date = Date::from_ymd(2022, 1, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_1() {
        let date = Date::from_ymd(2022, 2, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfThePresentation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_2() {
        let date = Date::from_ymd(2022, 2, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThePresentation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThePresentation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_3() {
        let date = Date::from_ymd(2022, 2, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_4() {
        let date = Date::from_ymd(2022, 2, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_5() {
        let date = Date::from_ymd(2022, 2, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_6() {
        let date = Date::from_ymd(2022, 2, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_7() {
        let date = Date::from_ymd(2022, 2, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_8() {
        let date = Date::from_ymd(2022, 2, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_9() {
        let date = Date::from_ymd(2022, 2, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_10() {
        let date = Date::from_ymd(2022, 2, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_11() {
        let date = Date::from_ymd(2022, 2, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_12() {
        let date = Date::from_ymd(2022, 2, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_13() {
        let date = Date::from_ymd(2022, 2, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_14() {
        let date = Date::from_ymd(2022, 2, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_15() {
        let date = Date::from_ymd(2022, 2, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_16() {
        let date = Date::from_ymd(2022, 2, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_17() {
        let date = Date::from_ymd(2022, 2, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_18() {
        let date = Date::from_ymd(2022, 2, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_19() {
        let date = Date::from_ymd(2022, 2, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_20() {
        let date = Date::from_ymd(2022, 2, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_21() {
        let date = Date::from_ymd(2022, 2, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_22() {
        let date = Date::from_ymd(2022, 2, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_23() {
        let date = Date::from_ymd(2022, 2, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_24() {
        let date = Date::from_ymd(2022, 2, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Matthias));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Matthias));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_25() {
        let date = Date::from_ymd(2022, 2, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_26() {
        let date = Date::from_ymd(2022, 2, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany7, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_27() {
        let date = Date::from_ymd(2022, 2, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_2_28() {
        let date = Date::from_ymd(2022, 2, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_1() {
        let date = Date::from_ymd(2022, 3, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_2() {
        let date = Date::from_ymd(2022, 3, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_3() {
        let date = Date::from_ymd(2022, 3, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThursdayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThursdayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_4() {
        let date = Date::from_ymd(2022, 3, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_5() {
        let date = Date::from_ymd(2022, 3, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_6() {
        let date = Date::from_ymd(2022, 3, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_7() {
        let date = Date::from_ymd(2022, 3, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_8() {
        let date = Date::from_ymd(2022, 3, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_9() {
        let date = Date::from_ymd(2022, 3, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_10() {
        let date = Date::from_ymd(2022, 3, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_11() {
        let date = Date::from_ymd(2022, 3, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_12() {
        let date = Date::from_ymd(2022, 3, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_13() {
        let date = Date::from_ymd(2022, 3, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_14() {
        let date = Date::from_ymd(2022, 3, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_15() {
        let date = Date::from_ymd(2022, 3, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_16() {
        let date = Date::from_ymd(2022, 3, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_17() {
        let date = Date::from_ymd(2022, 3, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_18() {
        let date = Date::from_ymd(2022, 3, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_19() {
        let date = Date::from_ymd(2022, 3, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Joseph));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Joseph));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_20() {
        let date = Date::from_ymd(2022, 3, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_21() {
        let date = Date::from_ymd(2022, 3, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_22() {
        let date = Date::from_ymd(2022, 3, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_23() {
        let date = Date::from_ymd(2022, 3, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_24() {
        let date = Date::from_ymd(2022, 3, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheAnnunciation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_25() {
        let date = Date::from_ymd(2022, 3, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::Annunciation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::Annunciation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_26() {
        let date = Date::from_ymd(2022, 3, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_27() {
        let date = Date::from_ymd(2022, 3, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_28() {
        let date = Date::from_ymd(2022, 3, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_29() {
        let date = Date::from_ymd(2022, 3, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_30() {
        let date = Date::from_ymd(2022, 3, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_3_31() {
        let date = Date::from_ymd(2022, 3, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_1() {
        let date = Date::from_ymd(2022, 4, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_2() {
        let date = Date::from_ymd(2022, 4, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_3() {
        let date = Date::from_ymd(2022, 4, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_4() {
        let date = Date::from_ymd(2022, 4, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_5() {
        let date = Date::from_ymd(2022, 4, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_6() {
        let date = Date::from_ymd(2022, 4, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_7() {
        let date = Date::from_ymd(2022, 4, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_8() {
        let date = Date::from_ymd(2022, 4, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_9() {
        let date = Date::from_ymd(2022, 4, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_10() {
        let date = Date::from_ymd(2022, 4, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::PalmSunday));
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::HolyWeek,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::PalmSunday));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::HolyWeek,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2022_4_11() {
        let date = Date::from_ymd(2022, 4, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MondayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MondayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_12() {
        let date = Date::from_ymd(2022, 4, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_13() {
        let date = Date::from_ymd(2022, 4, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_14() {
        let date = Date::from_ymd(2022, 4, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MaundyThursday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MaundyThursday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_15() {
        let date = Date::from_ymd(2022, 4, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::GoodFriday));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::GoodFriday));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_16() {
        let date = Date::from_ymd(2022, 4, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::HolySaturday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::HolySaturday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_17() {
        let date = Date::from_ymd(2022, 4, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::EasterSunday)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EasterSunday)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2022_4_18() {
        let date = Date::from_ymd(2022, 4, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MondayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MondayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_19() {
        let date = Date::from_ymd(2022, 4, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_20() {
        let date = Date::from_ymd(2022, 4, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_21() {
        let date = Date::from_ymd(2022, 4, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThursdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThursdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_22() {
        let date = Date::from_ymd(2022, 4, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_23() {
        let date = Date::from_ymd(2022, 4, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_24() {
        let date = Date::from_ymd(2022, 4, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_25() {
        let date = Date::from_ymd(2022, 4, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Mark));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Mark));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_26() {
        let date = Date::from_ymd(2022, 4, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_27() {
        let date = Date::from_ymd(2022, 4, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_28() {
        let date = Date::from_ymd(2022, 4, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_29() {
        let date = Date::from_ymd(2022, 4, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_4_30() {
        let date = Date::from_ymd(2022, 4, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_1() {
        let date = Date::from_ymd(2022, 5, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_2() {
        let date = Date::from_ymd(2022, 5, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::PhilipAndJames)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter3,
                Weekday::Mon
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::PhilipAndJames)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter3,
                Weekday::Mon
            ))
        );
    }
    #[test]
    fn test_calendar_for_2022_5_3() {
        let date = Date::from_ymd(2022, 5, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_4() {
        let date = Date::from_ymd(2022, 5, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_5() {
        let date = Date::from_ymd(2022, 5, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_6() {
        let date = Date::from_ymd(2022, 5, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_7() {
        let date = Date::from_ymd(2022, 5, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_8() {
        let date = Date::from_ymd(2022, 5, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_9() {
        let date = Date::from_ymd(2022, 5, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_10() {
        let date = Date::from_ymd(2022, 5, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_11() {
        let date = Date::from_ymd(2022, 5, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_12() {
        let date = Date::from_ymd(2022, 5, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_13() {
        let date = Date::from_ymd(2022, 5, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_14() {
        let date = Date::from_ymd(2022, 5, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_15() {
        let date = Date::from_ymd(2022, 5, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_16() {
        let date = Date::from_ymd(2022, 5, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_17() {
        let date = Date::from_ymd(2022, 5, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_18() {
        let date = Date::from_ymd(2022, 5, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_19() {
        let date = Date::from_ymd(2022, 5, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_20() {
        let date = Date::from_ymd(2022, 5, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_21() {
        let date = Date::from_ymd(2022, 5, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_22() {
        let date = Date::from_ymd(2022, 5, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_23() {
        let date = Date::from_ymd(2022, 5, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_24() {
        let date = Date::from_ymd(2022, 5, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_25() {
        let date = Date::from_ymd(2022, 5, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_26() {
        let date = Date::from_ymd(2022, 5, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AscensionDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AscensionDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_27() {
        let date = Date::from_ymd(2022, 5, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAscension)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_28() {
        let date = Date::from_ymd(2022, 5, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAscension)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_29() {
        let date = Date::from_ymd(2022, 5, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_30() {
        let date = Date::from_ymd(2022, 5, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheVisitation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_5_31() {
        let date = Date::from_ymd(2022, 5, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TheVisitation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TheVisitation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_1() {
        let date = Date::from_ymd(2022, 6, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_2() {
        let date = Date::from_ymd(2022, 6, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_3() {
        let date = Date::from_ymd(2022, 6, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_4() {
        let date = Date::from_ymd(2022, 6, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfPentecost)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_5() {
        let date = Date::from_ymd(2022, 6, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Pentecost));
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sun))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Pentecost));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sun))
        );
    }
    #[test]
    fn test_calendar_for_2022_6_6() {
        let date = Date::from_ymd(2022, 6, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_7() {
        let date = Date::from_ymd(2022, 6, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_8() {
        let date = Date::from_ymd(2022, 6, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_9() {
        let date = Date::from_ymd(2022, 6, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_10() {
        let date = Date::from_ymd(2022, 6, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_11() {
        let date = Date::from_ymd(2022, 6, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Barnabas));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTrinitySunday)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::Barnabas))
        );
    }
    #[test]
    fn test_calendar_for_2022_6_12() {
        let date = Date::from_ymd(2022, 6, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TrinitySunday)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sun))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TrinitySunday)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sun))
        );
    }
    #[test]
    fn test_calendar_for_2022_6_13() {
        let date = Date::from_ymd(2022, 6, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_14() {
        let date = Date::from_ymd(2022, 6, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_15() {
        let date = Date::from_ymd(2022, 6, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_16() {
        let date = Date::from_ymd(2022, 6, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_17() {
        let date = Date::from_ymd(2022, 6, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_18() {
        let date = Date::from_ymd(2022, 6, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_19() {
        let date = Date::from_ymd(2022, 6, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_20() {
        let date = Date::from_ymd(2022, 6, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_21() {
        let date = Date::from_ymd(2022, 6, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_22() {
        let date = Date::from_ymd(2022, 6, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_23() {
        let date = Date::from_ymd(2022, 6, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfStJohnTheBaptist)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_24() {
        let date = Date::from_ymd(2022, 6, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::NativityOfStJohnTheBaptist)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::NativityOfStJohnTheBaptist)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_25() {
        let date = Date::from_ymd(2022, 6, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_26() {
        let date = Date::from_ymd(2022, 6, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_27() {
        let date = Date::from_ymd(2022, 6, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_28() {
        let date = Date::from_ymd(2022, 6, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_29() {
        let date = Date::from_ymd(2022, 6, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::PeterAndPaul)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::PeterAndPaul)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_6_30() {
        let date = Date::from_ymd(2022, 6, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_1() {
        let date = Date::from_ymd(2022, 7, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_2() {
        let date = Date::from_ymd(2022, 7, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_3() {
        let date = Date::from_ymd(2022, 7, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_4() {
        let date = Date::from_ymd(2022, 7, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::IndependenceDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::IndependenceDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_5() {
        let date = Date::from_ymd(2022, 7, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_6() {
        let date = Date::from_ymd(2022, 7, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_7() {
        let date = Date::from_ymd(2022, 7, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_8() {
        let date = Date::from_ymd(2022, 7, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_9() {
        let date = Date::from_ymd(2022, 7, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_10() {
        let date = Date::from_ymd(2022, 7, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_11() {
        let date = Date::from_ymd(2022, 7, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_12() {
        let date = Date::from_ymd(2022, 7, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_13() {
        let date = Date::from_ymd(2022, 7, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_14() {
        let date = Date::from_ymd(2022, 7, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_15() {
        let date = Date::from_ymd(2022, 7, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_16() {
        let date = Date::from_ymd(2022, 7, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_17() {
        let date = Date::from_ymd(2022, 7, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_18() {
        let date = Date::from_ymd(2022, 7, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_19() {
        let date = Date::from_ymd(2022, 7, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_20() {
        let date = Date::from_ymd(2022, 7, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_21() {
        let date = Date::from_ymd(2022, 7, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_22() {
        let date = Date::from_ymd(2022, 7, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MaryMagdalene)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MaryMagdalene)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_23() {
        let date = Date::from_ymd(2022, 7, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_24() {
        let date = Date::from_ymd(2022, 7, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_25() {
        let date = Date::from_ymd(2022, 7, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::James));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::James));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_26() {
        let date = Date::from_ymd(2022, 7, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_27() {
        let date = Date::from_ymd(2022, 7, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_28() {
        let date = Date::from_ymd(2022, 7, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_29() {
        let date = Date::from_ymd(2022, 7, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_30() {
        let date = Date::from_ymd(2022, 7, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_7_31() {
        let date = Date::from_ymd(2022, 7, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_1() {
        let date = Date::from_ymd(2022, 8, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_2() {
        let date = Date::from_ymd(2022, 8, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_3() {
        let date = Date::from_ymd(2022, 8, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_4() {
        let date = Date::from_ymd(2022, 8, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_5() {
        let date = Date::from_ymd(2022, 8, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheTransfiguration)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_6() {
        let date = Date::from_ymd(2022, 8, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TheTransfiguration)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TheTransfiguration)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_7() {
        let date = Date::from_ymd(2022, 8, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_8() {
        let date = Date::from_ymd(2022, 8, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_9() {
        let date = Date::from_ymd(2022, 8, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_10() {
        let date = Date::from_ymd(2022, 8, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_11() {
        let date = Date::from_ymd(2022, 8, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_12() {
        let date = Date::from_ymd(2022, 8, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_13() {
        let date = Date::from_ymd(2022, 8, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_14() {
        let date = Date::from_ymd(2022, 8, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_15() {
        let date = Date::from_ymd(2022, 8, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Mary));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Mary));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_16() {
        let date = Date::from_ymd(2022, 8, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_17() {
        let date = Date::from_ymd(2022, 8, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_18() {
        let date = Date::from_ymd(2022, 8, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_19() {
        let date = Date::from_ymd(2022, 8, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_20() {
        let date = Date::from_ymd(2022, 8, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_21() {
        let date = Date::from_ymd(2022, 8, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_22() {
        let date = Date::from_ymd(2022, 8, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_23() {
        let date = Date::from_ymd(2022, 8, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_24() {
        let date = Date::from_ymd(2022, 8, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Bartholomew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Bartholomew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_25() {
        let date = Date::from_ymd(2022, 8, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_26() {
        let date = Date::from_ymd(2022, 8, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_27() {
        let date = Date::from_ymd(2022, 8, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_28() {
        let date = Date::from_ymd(2022, 8, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_29() {
        let date = Date::from_ymd(2022, 8, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_30() {
        let date = Date::from_ymd(2022, 8, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_8_31() {
        let date = Date::from_ymd(2022, 8, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_1() {
        let date = Date::from_ymd(2022, 9, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_2() {
        let date = Date::from_ymd(2022, 9, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_3() {
        let date = Date::from_ymd(2022, 9, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_4() {
        let date = Date::from_ymd(2022, 9, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_5() {
        let date = Date::from_ymd(2022, 9, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_6() {
        let date = Date::from_ymd(2022, 9, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_7() {
        let date = Date::from_ymd(2022, 9, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_8() {
        let date = Date::from_ymd(2022, 9, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_9() {
        let date = Date::from_ymd(2022, 9, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_10() {
        let date = Date::from_ymd(2022, 9, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_11() {
        let date = Date::from_ymd(2022, 9, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_12() {
        let date = Date::from_ymd(2022, 9, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_13() {
        let date = Date::from_ymd(2022, 9, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfHolyCross)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_14() {
        let date = Date::from_ymd(2022, 9, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::HolyCross));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::HolyCross));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_15() {
        let date = Date::from_ymd(2022, 9, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_16() {
        let date = Date::from_ymd(2022, 9, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_17() {
        let date = Date::from_ymd(2022, 9, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_18() {
        let date = Date::from_ymd(2022, 9, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_19() {
        let date = Date::from_ymd(2022, 9, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_20() {
        let date = Date::from_ymd(2022, 9, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_21() {
        let date = Date::from_ymd(2022, 9, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Matthew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Matthew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_22() {
        let date = Date::from_ymd(2022, 9, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_23() {
        let date = Date::from_ymd(2022, 9, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_24() {
        let date = Date::from_ymd(2022, 9, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_25() {
        let date = Date::from_ymd(2022, 9, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_26() {
        let date = Date::from_ymd(2022, 9, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_27() {
        let date = Date::from_ymd(2022, 9, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_28() {
        let date = Date::from_ymd(2022, 9, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_29() {
        let date = Date::from_ymd(2022, 9, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Michael));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Michael));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_9_30() {
        let date = Date::from_ymd(2022, 9, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_1() {
        let date = Date::from_ymd(2022, 10, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_2() {
        let date = Date::from_ymd(2022, 10, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_3() {
        let date = Date::from_ymd(2022, 10, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_4() {
        let date = Date::from_ymd(2022, 10, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_5() {
        let date = Date::from_ymd(2022, 10, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_6() {
        let date = Date::from_ymd(2022, 10, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_7() {
        let date = Date::from_ymd(2022, 10, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_8() {
        let date = Date::from_ymd(2022, 10, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_9() {
        let date = Date::from_ymd(2022, 10, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_10() {
        let date = Date::from_ymd(2022, 10, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_11() {
        let date = Date::from_ymd(2022, 10, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_12() {
        let date = Date::from_ymd(2022, 10, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_13() {
        let date = Date::from_ymd(2022, 10, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_14() {
        let date = Date::from_ymd(2022, 10, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_15() {
        let date = Date::from_ymd(2022, 10, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_16() {
        let date = Date::from_ymd(2022, 10, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_17() {
        let date = Date::from_ymd(2022, 10, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_18() {
        let date = Date::from_ymd(2022, 10, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Luke));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Luke));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_19() {
        let date = Date::from_ymd(2022, 10, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_20() {
        let date = Date::from_ymd(2022, 10, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_21() {
        let date = Date::from_ymd(2022, 10, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_22() {
        let date = Date::from_ymd(2022, 10, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_23() {
        let date = Date::from_ymd(2022, 10, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sun)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::Feast(Feast::JamesOfJerusalem))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sun)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::JamesOfJerusalem))
        );
    }
    #[test]
    fn test_calendar_for_2022_10_24() {
        let date = Date::from_ymd(2022, 10, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::JamesOfJerusalem)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper25,
                Weekday::Mon
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::JamesOfJerusalem)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper25,
                Weekday::Mon
            ))
        );
    }
    #[test]
    fn test_calendar_for_2022_10_25() {
        let date = Date::from_ymd(2022, 10, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_26() {
        let date = Date::from_ymd(2022, 10, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_27() {
        let date = Date::from_ymd(2022, 10, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_28() {
        let date = Date::from_ymd(2022, 10, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SimonAndJude)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SimonAndJude)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_29() {
        let date = Date::from_ymd(2022, 10, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_30() {
        let date = Date::from_ymd(2022, 10, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_10_31() {
        let date = Date::from_ymd(2022, 10, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfAllSaints)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_1() {
        let date = Date::from_ymd(2022, 11, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AllSaintsDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AllSaintsDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_2() {
        let date = Date::from_ymd(2022, 11, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_3() {
        let date = Date::from_ymd(2022, 11, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_4() {
        let date = Date::from_ymd(2022, 11, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_5() {
        let date = Date::from_ymd(2022, 11, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_6() {
        let date = Date::from_ymd(2022, 11, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::AllSaintsDay)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper27,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::AllSaintsDay)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper27,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2022_11_7() {
        let date = Date::from_ymd(2022, 11, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_8() {
        let date = Date::from_ymd(2022, 11, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_9() {
        let date = Date::from_ymd(2022, 11, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_10() {
        let date = Date::from_ymd(2022, 11, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_11() {
        let date = Date::from_ymd(2022, 11, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_12() {
        let date = Date::from_ymd(2022, 11, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_13() {
        let date = Date::from_ymd(2022, 11, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_14() {
        let date = Date::from_ymd(2022, 11, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_15() {
        let date = Date::from_ymd(2022, 11, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_16() {
        let date = Date::from_ymd(2022, 11, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_17() {
        let date = Date::from_ymd(2022, 11, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_18() {
        let date = Date::from_ymd(2022, 11, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_19() {
        let date = Date::from_ymd(2022, 11, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_20() {
        let date = Date::from_ymd(2022, 11, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_21() {
        let date = Date::from_ymd(2022, 11, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_22() {
        let date = Date::from_ymd(2022, 11, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_23() {
        let date = Date::from_ymd(2022, 11, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_24() {
        let date = Date::from_ymd(2022, 11, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThanksgivingDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThanksgivingDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_25() {
        let date = Date::from_ymd(2022, 11, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_26() {
        let date = Date::from_ymd(2022, 11, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_27() {
        let date = Date::from_ymd(2022, 11, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_28() {
        let date = Date::from_ymd(2022, 11, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_29() {
        let date = Date::from_ymd(2022, 11, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_11_30() {
        let date = Date::from_ymd(2022, 11, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Andrew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Andrew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_1() {
        let date = Date::from_ymd(2022, 12, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_2() {
        let date = Date::from_ymd(2022, 12, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_3() {
        let date = Date::from_ymd(2022, 12, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_4() {
        let date = Date::from_ymd(2022, 12, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_5() {
        let date = Date::from_ymd(2022, 12, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_6() {
        let date = Date::from_ymd(2022, 12, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_7() {
        let date = Date::from_ymd(2022, 12, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_8() {
        let date = Date::from_ymd(2022, 12, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_9() {
        let date = Date::from_ymd(2022, 12, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_10() {
        let date = Date::from_ymd(2022, 12, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_11() {
        let date = Date::from_ymd(2022, 12, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_12() {
        let date = Date::from_ymd(2022, 12, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_13() {
        let date = Date::from_ymd(2022, 12, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_14() {
        let date = Date::from_ymd(2022, 12, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_15() {
        let date = Date::from_ymd(2022, 12, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_16() {
        let date = Date::from_ymd(2022, 12, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_17() {
        let date = Date::from_ymd(2022, 12, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_18() {
        let date = Date::from_ymd(2022, 12, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_19() {
        let date = Date::from_ymd(2022, 12, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_20() {
        let date = Date::from_ymd(2022, 12, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_21() {
        let date = Date::from_ymd(2022, 12, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Thomas));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Thomas));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_22() {
        let date = Date::from_ymd(2022, 12, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_23() {
        let date = Date::from_ymd(2022, 12, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_24() {
        let date = Date::from_ymd(2022, 12, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December24));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ChristmasEve)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_25() {
        let date = Date::from_ymd(2022, 12, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ChristmasDay)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Christmas,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ChristmasDay)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Christmas,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2022_12_26() {
        let date = Date::from_ymd(2022, 12, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Stephen));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Stephen));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_27() {
        let date = Date::from_ymd(2022, 12, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::John));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::John));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_28() {
        let date = Date::from_ymd(2022, 12, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::HolyInnocents)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::HolyInnocents)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_29() {
        let date = Date::from_ymd(2022, 12, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December29));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::December29));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_30() {
        let date = Date::from_ymd(2022, 12, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December30));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::December30));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2022_12_31() {
        let date = Date::from_ymd(2022, 12, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December31));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfHolyName)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_1() {
        let date = Date::from_ymd(2023, 1, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::HolyName));
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Christmas1,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::HolyName));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Christmas1,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2023_1_2() {
        let date = Date::from_ymd(2023, 1, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January2));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January2));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_3() {
        let date = Date::from_ymd(2023, 1, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January3));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January3));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_4() {
        let date = Date::from_ymd(2023, 1, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January4));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January4));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_5() {
        let date = Date::from_ymd(2023, 1, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January5));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfEpiphany)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_6() {
        let date = Date::from_ymd(2023, 1, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Epiphany));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Epiphany));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_7() {
        let date = Date::from_ymd(2023, 1, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January7));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfEpiphany1)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_8() {
        let date = Date::from_ymd(2023, 1, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_9() {
        let date = Date::from_ymd(2023, 1, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_10() {
        let date = Date::from_ymd(2023, 1, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_11() {
        let date = Date::from_ymd(2023, 1, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_12() {
        let date = Date::from_ymd(2023, 1, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_13() {
        let date = Date::from_ymd(2023, 1, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_14() {
        let date = Date::from_ymd(2023, 1, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_15() {
        let date = Date::from_ymd(2023, 1, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_16() {
        let date = Date::from_ymd(2023, 1, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_17() {
        let date = Date::from_ymd(2023, 1, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_18() {
        let date = Date::from_ymd(2023, 1, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ConfessionOfStPeter)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ConfessionOfStPeter)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_19() {
        let date = Date::from_ymd(2023, 1, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_20() {
        let date = Date::from_ymd(2023, 1, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_21() {
        let date = Date::from_ymd(2023, 1, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_22() {
        let date = Date::from_ymd(2023, 1, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_23() {
        let date = Date::from_ymd(2023, 1, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_24() {
        let date = Date::from_ymd(2023, 1, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_25() {
        let date = Date::from_ymd(2023, 1, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ConversionOfStPaul)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ConversionOfStPaul)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_26() {
        let date = Date::from_ymd(2023, 1, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_27() {
        let date = Date::from_ymd(2023, 1, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_28() {
        let date = Date::from_ymd(2023, 1, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_29() {
        let date = Date::from_ymd(2023, 1, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_30() {
        let date = Date::from_ymd(2023, 1, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_1_31() {
        let date = Date::from_ymd(2023, 1, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_1() {
        let date = Date::from_ymd(2023, 2, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfThePresentation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_2() {
        let date = Date::from_ymd(2023, 2, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThePresentation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThePresentation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_3() {
        let date = Date::from_ymd(2023, 2, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_4() {
        let date = Date::from_ymd(2023, 2, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_5() {
        let date = Date::from_ymd(2023, 2, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_6() {
        let date = Date::from_ymd(2023, 2, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_7() {
        let date = Date::from_ymd(2023, 2, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_8() {
        let date = Date::from_ymd(2023, 2, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_9() {
        let date = Date::from_ymd(2023, 2, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_10() {
        let date = Date::from_ymd(2023, 2, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_11() {
        let date = Date::from_ymd(2023, 2, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_12() {
        let date = Date::from_ymd(2023, 2, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_13() {
        let date = Date::from_ymd(2023, 2, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_14() {
        let date = Date::from_ymd(2023, 2, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_15() {
        let date = Date::from_ymd(2023, 2, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_16() {
        let date = Date::from_ymd(2023, 2, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_17() {
        let date = Date::from_ymd(2023, 2, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_18() {
        let date = Date::from_ymd(2023, 2, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany6, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_19() {
        let date = Date::from_ymd(2023, 2, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_20() {
        let date = Date::from_ymd(2023, 2, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_21() {
        let date = Date::from_ymd(2023, 2, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_22() {
        let date = Date::from_ymd(2023, 2, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_23() {
        let date = Date::from_ymd(2023, 2, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThursdayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThursdayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_24() {
        let date = Date::from_ymd(2023, 2, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Matthias));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Matthias));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_25() {
        let date = Date::from_ymd(2023, 2, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_26() {
        let date = Date::from_ymd(2023, 2, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_27() {
        let date = Date::from_ymd(2023, 2, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_2_28() {
        let date = Date::from_ymd(2023, 2, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_1() {
        let date = Date::from_ymd(2023, 3, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_2() {
        let date = Date::from_ymd(2023, 3, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_3() {
        let date = Date::from_ymd(2023, 3, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_4() {
        let date = Date::from_ymd(2023, 3, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_5() {
        let date = Date::from_ymd(2023, 3, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_6() {
        let date = Date::from_ymd(2023, 3, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_7() {
        let date = Date::from_ymd(2023, 3, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_8() {
        let date = Date::from_ymd(2023, 3, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_9() {
        let date = Date::from_ymd(2023, 3, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_10() {
        let date = Date::from_ymd(2023, 3, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_11() {
        let date = Date::from_ymd(2023, 3, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_12() {
        let date = Date::from_ymd(2023, 3, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_13() {
        let date = Date::from_ymd(2023, 3, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_14() {
        let date = Date::from_ymd(2023, 3, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_15() {
        let date = Date::from_ymd(2023, 3, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_16() {
        let date = Date::from_ymd(2023, 3, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_17() {
        let date = Date::from_ymd(2023, 3, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_18() {
        let date = Date::from_ymd(2023, 3, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_19() {
        let date = Date::from_ymd(2023, 3, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_20() {
        let date = Date::from_ymd(2023, 3, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::Joseph)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Lent4,
                Weekday::Mon
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::Joseph)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Lent4,
                Weekday::Mon
            ))
        );
    }
    #[test]
    fn test_calendar_for_2023_3_21() {
        let date = Date::from_ymd(2023, 3, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_22() {
        let date = Date::from_ymd(2023, 3, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_23() {
        let date = Date::from_ymd(2023, 3, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_24() {
        let date = Date::from_ymd(2023, 3, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheAnnunciation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_25() {
        let date = Date::from_ymd(2023, 3, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::Annunciation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::Annunciation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_26() {
        let date = Date::from_ymd(2023, 3, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_27() {
        let date = Date::from_ymd(2023, 3, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_28() {
        let date = Date::from_ymd(2023, 3, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_29() {
        let date = Date::from_ymd(2023, 3, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_30() {
        let date = Date::from_ymd(2023, 3, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_3_31() {
        let date = Date::from_ymd(2023, 3, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_1() {
        let date = Date::from_ymd(2023, 4, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_2() {
        let date = Date::from_ymd(2023, 4, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::PalmSunday));
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::HolyWeek,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::PalmSunday));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::HolyWeek,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2023_4_3() {
        let date = Date::from_ymd(2023, 4, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MondayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MondayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_4() {
        let date = Date::from_ymd(2023, 4, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_5() {
        let date = Date::from_ymd(2023, 4, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_6() {
        let date = Date::from_ymd(2023, 4, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MaundyThursday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MaundyThursday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_7() {
        let date = Date::from_ymd(2023, 4, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::GoodFriday));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::GoodFriday));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_8() {
        let date = Date::from_ymd(2023, 4, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::HolySaturday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::HolySaturday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_9() {
        let date = Date::from_ymd(2023, 4, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::EasterSunday)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EasterSunday)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2023_4_10() {
        let date = Date::from_ymd(2023, 4, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MondayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MondayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_11() {
        let date = Date::from_ymd(2023, 4, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_12() {
        let date = Date::from_ymd(2023, 4, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_13() {
        let date = Date::from_ymd(2023, 4, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThursdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThursdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_14() {
        let date = Date::from_ymd(2023, 4, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_15() {
        let date = Date::from_ymd(2023, 4, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_16() {
        let date = Date::from_ymd(2023, 4, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_17() {
        let date = Date::from_ymd(2023, 4, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_18() {
        let date = Date::from_ymd(2023, 4, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_19() {
        let date = Date::from_ymd(2023, 4, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_20() {
        let date = Date::from_ymd(2023, 4, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_21() {
        let date = Date::from_ymd(2023, 4, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_22() {
        let date = Date::from_ymd(2023, 4, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_23() {
        let date = Date::from_ymd(2023, 4, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_24() {
        let date = Date::from_ymd(2023, 4, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_25() {
        let date = Date::from_ymd(2023, 4, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Mark));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Mark));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_26() {
        let date = Date::from_ymd(2023, 4, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_27() {
        let date = Date::from_ymd(2023, 4, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_28() {
        let date = Date::from_ymd(2023, 4, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_29() {
        let date = Date::from_ymd(2023, 4, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_4_30() {
        let date = Date::from_ymd(2023, 4, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_1() {
        let date = Date::from_ymd(2023, 5, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::PhilipAndJames)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::PhilipAndJames)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_2() {
        let date = Date::from_ymd(2023, 5, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_3() {
        let date = Date::from_ymd(2023, 5, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_4() {
        let date = Date::from_ymd(2023, 5, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_5() {
        let date = Date::from_ymd(2023, 5, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_6() {
        let date = Date::from_ymd(2023, 5, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_7() {
        let date = Date::from_ymd(2023, 5, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_8() {
        let date = Date::from_ymd(2023, 5, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_9() {
        let date = Date::from_ymd(2023, 5, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_10() {
        let date = Date::from_ymd(2023, 5, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_11() {
        let date = Date::from_ymd(2023, 5, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_12() {
        let date = Date::from_ymd(2023, 5, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_13() {
        let date = Date::from_ymd(2023, 5, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_14() {
        let date = Date::from_ymd(2023, 5, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_15() {
        let date = Date::from_ymd(2023, 5, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_16() {
        let date = Date::from_ymd(2023, 5, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_17() {
        let date = Date::from_ymd(2023, 5, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_18() {
        let date = Date::from_ymd(2023, 5, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AscensionDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AscensionDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_19() {
        let date = Date::from_ymd(2023, 5, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAscension)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_20() {
        let date = Date::from_ymd(2023, 5, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAscension)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_21() {
        let date = Date::from_ymd(2023, 5, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_22() {
        let date = Date::from_ymd(2023, 5, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_23() {
        let date = Date::from_ymd(2023, 5, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_24() {
        let date = Date::from_ymd(2023, 5, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_25() {
        let date = Date::from_ymd(2023, 5, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_26() {
        let date = Date::from_ymd(2023, 5, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_27() {
        let date = Date::from_ymd(2023, 5, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfPentecost)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_28() {
        let date = Date::from_ymd(2023, 5, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Pentecost));
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Sun))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Pentecost));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Sun))
        );
    }
    #[test]
    fn test_calendar_for_2023_5_29() {
        let date = Date::from_ymd(2023, 5, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_30() {
        let date = Date::from_ymd(2023, 5, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheVisitation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_5_31() {
        let date = Date::from_ymd(2023, 5, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TheVisitation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TheVisitation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_1() {
        let date = Date::from_ymd(2023, 6, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_2() {
        let date = Date::from_ymd(2023, 6, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_3() {
        let date = Date::from_ymd(2023, 6, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTrinitySunday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_4() {
        let date = Date::from_ymd(2023, 6, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TrinitySunday)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sun))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TrinitySunday)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sun))
        );
    }
    #[test]
    fn test_calendar_for_2023_6_5() {
        let date = Date::from_ymd(2023, 6, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_6() {
        let date = Date::from_ymd(2023, 6, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_7() {
        let date = Date::from_ymd(2023, 6, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_8() {
        let date = Date::from_ymd(2023, 6, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_9() {
        let date = Date::from_ymd(2023, 6, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_10() {
        let date = Date::from_ymd(2023, 6, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_11() {
        let date = Date::from_ymd(2023, 6, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sun)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::Feast(Feast::Barnabas))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sun)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::Barnabas))
        );
    }
    #[test]
    fn test_calendar_for_2023_6_12() {
        let date = Date::from_ymd(2023, 6, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::Barnabas)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Mon))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::Barnabas)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Mon))
        );
    }
    #[test]
    fn test_calendar_for_2023_6_13() {
        let date = Date::from_ymd(2023, 6, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_14() {
        let date = Date::from_ymd(2023, 6, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_15() {
        let date = Date::from_ymd(2023, 6, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_16() {
        let date = Date::from_ymd(2023, 6, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_17() {
        let date = Date::from_ymd(2023, 6, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_18() {
        let date = Date::from_ymd(2023, 6, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_19() {
        let date = Date::from_ymd(2023, 6, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_20() {
        let date = Date::from_ymd(2023, 6, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_21() {
        let date = Date::from_ymd(2023, 6, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_22() {
        let date = Date::from_ymd(2023, 6, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_23() {
        let date = Date::from_ymd(2023, 6, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfStJohnTheBaptist)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_24() {
        let date = Date::from_ymd(2023, 6, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::NativityOfStJohnTheBaptist)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::NativityOfStJohnTheBaptist)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_25() {
        let date = Date::from_ymd(2023, 6, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_26() {
        let date = Date::from_ymd(2023, 6, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_27() {
        let date = Date::from_ymd(2023, 6, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_28() {
        let date = Date::from_ymd(2023, 6, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_29() {
        let date = Date::from_ymd(2023, 6, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::PeterAndPaul)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::PeterAndPaul)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_6_30() {
        let date = Date::from_ymd(2023, 6, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_1() {
        let date = Date::from_ymd(2023, 7, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_2() {
        let date = Date::from_ymd(2023, 7, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_3() {
        let date = Date::from_ymd(2023, 7, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_4() {
        let date = Date::from_ymd(2023, 7, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::IndependenceDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::IndependenceDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_5() {
        let date = Date::from_ymd(2023, 7, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_6() {
        let date = Date::from_ymd(2023, 7, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_7() {
        let date = Date::from_ymd(2023, 7, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_8() {
        let date = Date::from_ymd(2023, 7, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_9() {
        let date = Date::from_ymd(2023, 7, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_10() {
        let date = Date::from_ymd(2023, 7, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_11() {
        let date = Date::from_ymd(2023, 7, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_12() {
        let date = Date::from_ymd(2023, 7, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_13() {
        let date = Date::from_ymd(2023, 7, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_14() {
        let date = Date::from_ymd(2023, 7, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_15() {
        let date = Date::from_ymd(2023, 7, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_16() {
        let date = Date::from_ymd(2023, 7, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_17() {
        let date = Date::from_ymd(2023, 7, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_18() {
        let date = Date::from_ymd(2023, 7, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_19() {
        let date = Date::from_ymd(2023, 7, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_20() {
        let date = Date::from_ymd(2023, 7, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_21() {
        let date = Date::from_ymd(2023, 7, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_22() {
        let date = Date::from_ymd(2023, 7, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MaryMagdalene)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MaryMagdalene)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_23() {
        let date = Date::from_ymd(2023, 7, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_24() {
        let date = Date::from_ymd(2023, 7, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_25() {
        let date = Date::from_ymd(2023, 7, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::James));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::James));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_26() {
        let date = Date::from_ymd(2023, 7, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_27() {
        let date = Date::from_ymd(2023, 7, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_28() {
        let date = Date::from_ymd(2023, 7, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_29() {
        let date = Date::from_ymd(2023, 7, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_30() {
        let date = Date::from_ymd(2023, 7, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_7_31() {
        let date = Date::from_ymd(2023, 7, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_1() {
        let date = Date::from_ymd(2023, 8, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_2() {
        let date = Date::from_ymd(2023, 8, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_3() {
        let date = Date::from_ymd(2023, 8, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_4() {
        let date = Date::from_ymd(2023, 8, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_5() {
        let date = Date::from_ymd(2023, 8, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheTransfiguration)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_6() {
        let date = Date::from_ymd(2023, 8, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sun)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::Feast(Feast::TheTransfiguration))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sun)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::TheTransfiguration))
        );
    }
    #[test]
    fn test_calendar_for_2023_8_7() {
        let date = Date::from_ymd(2023, 8, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::TheTransfiguration)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper13,
                Weekday::Mon
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::TheTransfiguration)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper13,
                Weekday::Mon
            ))
        );
    }
    #[test]
    fn test_calendar_for_2023_8_8() {
        let date = Date::from_ymd(2023, 8, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_9() {
        let date = Date::from_ymd(2023, 8, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_10() {
        let date = Date::from_ymd(2023, 8, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_11() {
        let date = Date::from_ymd(2023, 8, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_12() {
        let date = Date::from_ymd(2023, 8, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_13() {
        let date = Date::from_ymd(2023, 8, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_14() {
        let date = Date::from_ymd(2023, 8, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_15() {
        let date = Date::from_ymd(2023, 8, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Mary));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Mary));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_16() {
        let date = Date::from_ymd(2023, 8, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_17() {
        let date = Date::from_ymd(2023, 8, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_18() {
        let date = Date::from_ymd(2023, 8, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_19() {
        let date = Date::from_ymd(2023, 8, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_20() {
        let date = Date::from_ymd(2023, 8, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_21() {
        let date = Date::from_ymd(2023, 8, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_22() {
        let date = Date::from_ymd(2023, 8, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_23() {
        let date = Date::from_ymd(2023, 8, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_24() {
        let date = Date::from_ymd(2023, 8, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Bartholomew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Bartholomew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_25() {
        let date = Date::from_ymd(2023, 8, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_26() {
        let date = Date::from_ymd(2023, 8, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_27() {
        let date = Date::from_ymd(2023, 8, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_28() {
        let date = Date::from_ymd(2023, 8, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_29() {
        let date = Date::from_ymd(2023, 8, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_30() {
        let date = Date::from_ymd(2023, 8, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_8_31() {
        let date = Date::from_ymd(2023, 8, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_1() {
        let date = Date::from_ymd(2023, 9, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_2() {
        let date = Date::from_ymd(2023, 9, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_3() {
        let date = Date::from_ymd(2023, 9, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_4() {
        let date = Date::from_ymd(2023, 9, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_5() {
        let date = Date::from_ymd(2023, 9, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_6() {
        let date = Date::from_ymd(2023, 9, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_7() {
        let date = Date::from_ymd(2023, 9, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_8() {
        let date = Date::from_ymd(2023, 9, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_9() {
        let date = Date::from_ymd(2023, 9, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_10() {
        let date = Date::from_ymd(2023, 9, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_11() {
        let date = Date::from_ymd(2023, 9, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_12() {
        let date = Date::from_ymd(2023, 9, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_13() {
        let date = Date::from_ymd(2023, 9, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfHolyCross)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_14() {
        let date = Date::from_ymd(2023, 9, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::HolyCross));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::HolyCross));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_15() {
        let date = Date::from_ymd(2023, 9, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_16() {
        let date = Date::from_ymd(2023, 9, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_17() {
        let date = Date::from_ymd(2023, 9, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_18() {
        let date = Date::from_ymd(2023, 9, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_19() {
        let date = Date::from_ymd(2023, 9, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_20() {
        let date = Date::from_ymd(2023, 9, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_21() {
        let date = Date::from_ymd(2023, 9, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Matthew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Matthew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_22() {
        let date = Date::from_ymd(2023, 9, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_23() {
        let date = Date::from_ymd(2023, 9, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_24() {
        let date = Date::from_ymd(2023, 9, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_25() {
        let date = Date::from_ymd(2023, 9, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_26() {
        let date = Date::from_ymd(2023, 9, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_27() {
        let date = Date::from_ymd(2023, 9, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_28() {
        let date = Date::from_ymd(2023, 9, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_29() {
        let date = Date::from_ymd(2023, 9, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Michael));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Michael));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_9_30() {
        let date = Date::from_ymd(2023, 9, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_1() {
        let date = Date::from_ymd(2023, 10, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_2() {
        let date = Date::from_ymd(2023, 10, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_3() {
        let date = Date::from_ymd(2023, 10, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_4() {
        let date = Date::from_ymd(2023, 10, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_5() {
        let date = Date::from_ymd(2023, 10, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_6() {
        let date = Date::from_ymd(2023, 10, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_7() {
        let date = Date::from_ymd(2023, 10, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_8() {
        let date = Date::from_ymd(2023, 10, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_9() {
        let date = Date::from_ymd(2023, 10, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_10() {
        let date = Date::from_ymd(2023, 10, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_11() {
        let date = Date::from_ymd(2023, 10, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_12() {
        let date = Date::from_ymd(2023, 10, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_13() {
        let date = Date::from_ymd(2023, 10, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_14() {
        let date = Date::from_ymd(2023, 10, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_15() {
        let date = Date::from_ymd(2023, 10, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_16() {
        let date = Date::from_ymd(2023, 10, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_17() {
        let date = Date::from_ymd(2023, 10, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_18() {
        let date = Date::from_ymd(2023, 10, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Luke));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Luke));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_19() {
        let date = Date::from_ymd(2023, 10, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_20() {
        let date = Date::from_ymd(2023, 10, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_21() {
        let date = Date::from_ymd(2023, 10, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_22() {
        let date = Date::from_ymd(2023, 10, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_23() {
        let date = Date::from_ymd(2023, 10, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::JamesOfJerusalem)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::JamesOfJerusalem)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_24() {
        let date = Date::from_ymd(2023, 10, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_25() {
        let date = Date::from_ymd(2023, 10, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_26() {
        let date = Date::from_ymd(2023, 10, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_27() {
        let date = Date::from_ymd(2023, 10, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_28() {
        let date = Date::from_ymd(2023, 10, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SimonAndJude)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SimonAndJude)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_29() {
        let date = Date::from_ymd(2023, 10, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_30() {
        let date = Date::from_ymd(2023, 10, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_10_31() {
        let date = Date::from_ymd(2023, 10, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfAllSaints)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_1() {
        let date = Date::from_ymd(2023, 11, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AllSaintsDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AllSaintsDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_2() {
        let date = Date::from_ymd(2023, 11, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_3() {
        let date = Date::from_ymd(2023, 11, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_4() {
        let date = Date::from_ymd(2023, 11, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_5() {
        let date = Date::from_ymd(2023, 11, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::AllSaintsDay)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper26,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::AllSaintsDay)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper26,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2023_11_6() {
        let date = Date::from_ymd(2023, 11, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_7() {
        let date = Date::from_ymd(2023, 11, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_8() {
        let date = Date::from_ymd(2023, 11, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_9() {
        let date = Date::from_ymd(2023, 11, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_10() {
        let date = Date::from_ymd(2023, 11, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_11() {
        let date = Date::from_ymd(2023, 11, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_12() {
        let date = Date::from_ymd(2023, 11, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_13() {
        let date = Date::from_ymd(2023, 11, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_14() {
        let date = Date::from_ymd(2023, 11, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_15() {
        let date = Date::from_ymd(2023, 11, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_16() {
        let date = Date::from_ymd(2023, 11, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_17() {
        let date = Date::from_ymd(2023, 11, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_18() {
        let date = Date::from_ymd(2023, 11, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper27, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_19() {
        let date = Date::from_ymd(2023, 11, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_20() {
        let date = Date::from_ymd(2023, 11, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_21() {
        let date = Date::from_ymd(2023, 11, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_22() {
        let date = Date::from_ymd(2023, 11, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_23() {
        let date = Date::from_ymd(2023, 11, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThanksgivingDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThanksgivingDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_24() {
        let date = Date::from_ymd(2023, 11, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_25() {
        let date = Date::from_ymd(2023, 11, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper28, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_26() {
        let date = Date::from_ymd(2023, 11, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_27() {
        let date = Date::from_ymd(2023, 11, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_28() {
        let date = Date::from_ymd(2023, 11, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_29() {
        let date = Date::from_ymd(2023, 11, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_11_30() {
        let date = Date::from_ymd(2023, 11, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Andrew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Andrew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_1() {
        let date = Date::from_ymd(2023, 12, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_2() {
        let date = Date::from_ymd(2023, 12, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper29, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_3() {
        let date = Date::from_ymd(2023, 12, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_4() {
        let date = Date::from_ymd(2023, 12, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_5() {
        let date = Date::from_ymd(2023, 12, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_6() {
        let date = Date::from_ymd(2023, 12, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_7() {
        let date = Date::from_ymd(2023, 12, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_8() {
        let date = Date::from_ymd(2023, 12, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_9() {
        let date = Date::from_ymd(2023, 12, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_10() {
        let date = Date::from_ymd(2023, 12, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_11() {
        let date = Date::from_ymd(2023, 12, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_12() {
        let date = Date::from_ymd(2023, 12, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_13() {
        let date = Date::from_ymd(2023, 12, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_14() {
        let date = Date::from_ymd(2023, 12, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_15() {
        let date = Date::from_ymd(2023, 12, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_16() {
        let date = Date::from_ymd(2023, 12, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_17() {
        let date = Date::from_ymd(2023, 12, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_18() {
        let date = Date::from_ymd(2023, 12, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_19() {
        let date = Date::from_ymd(2023, 12, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_20() {
        let date = Date::from_ymd(2023, 12, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_21() {
        let date = Date::from_ymd(2023, 12, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Thomas));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Thomas));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_22() {
        let date = Date::from_ymd(2023, 12, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_23() {
        let date = Date::from_ymd(2023, 12, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_24() {
        let date = Date::from_ymd(2023, 12, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Advent4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ChristmasEve)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Advent4,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2023_12_25() {
        let date = Date::from_ymd(2023, 12, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ChristmasDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ChristmasDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_26() {
        let date = Date::from_ymd(2023, 12, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Stephen));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Stephen));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_27() {
        let date = Date::from_ymd(2023, 12, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::John));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::John));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_28() {
        let date = Date::from_ymd(2023, 12, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::HolyInnocents)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::HolyInnocents)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_29() {
        let date = Date::from_ymd(2023, 12, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December29));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::December29));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_30() {
        let date = Date::from_ymd(2023, 12, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::December30));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::December30));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2023_12_31() {
        let date = Date::from_ymd(2023, 12, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Christmas1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfHolyName)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Christmas1,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2024_1_1() {
        let date = Date::from_ymd(2024, 1, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::HolyName));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::HolyName));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_2() {
        let date = Date::from_ymd(2024, 1, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January2));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January2));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_3() {
        let date = Date::from_ymd(2024, 1, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January3));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January3));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_4() {
        let date = Date::from_ymd(2024, 1, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January4));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::January4));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_5() {
        let date = Date::from_ymd(2024, 1, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::January5));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfEpiphany)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_6() {
        let date = Date::from_ymd(2024, 1, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Epiphany));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Epiphany));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::EveOfEpiphany1))
        );
    }
    #[test]
    fn test_calendar_for_2024_1_7() {
        let date = Date::from_ymd(2024, 1, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_8() {
        let date = Date::from_ymd(2024, 1, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_9() {
        let date = Date::from_ymd(2024, 1, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_10() {
        let date = Date::from_ymd(2024, 1, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_11() {
        let date = Date::from_ymd(2024, 1, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_12() {
        let date = Date::from_ymd(2024, 1, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_13() {
        let date = Date::from_ymd(2024, 1, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany1, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_14() {
        let date = Date::from_ymd(2024, 1, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_15() {
        let date = Date::from_ymd(2024, 1, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_16() {
        let date = Date::from_ymd(2024, 1, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_17() {
        let date = Date::from_ymd(2024, 1, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_18() {
        let date = Date::from_ymd(2024, 1, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ConfessionOfStPeter)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ConfessionOfStPeter)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_19() {
        let date = Date::from_ymd(2024, 1, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_20() {
        let date = Date::from_ymd(2024, 1, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_21() {
        let date = Date::from_ymd(2024, 1, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_22() {
        let date = Date::from_ymd(2024, 1, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_23() {
        let date = Date::from_ymd(2024, 1, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_24() {
        let date = Date::from_ymd(2024, 1, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_25() {
        let date = Date::from_ymd(2024, 1, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ConversionOfStPaul)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ConversionOfStPaul)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_26() {
        let date = Date::from_ymd(2024, 1, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_27() {
        let date = Date::from_ymd(2024, 1, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_28() {
        let date = Date::from_ymd(2024, 1, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_29() {
        let date = Date::from_ymd(2024, 1, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_30() {
        let date = Date::from_ymd(2024, 1, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_1_31() {
        let date = Date::from_ymd(2024, 1, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_1() {
        let date = Date::from_ymd(2024, 2, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfThePresentation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_2() {
        let date = Date::from_ymd(2024, 2, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThePresentation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThePresentation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_3() {
        let date = Date::from_ymd(2024, 2, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_4() {
        let date = Date::from_ymd(2024, 2, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_5() {
        let date = Date::from_ymd(2024, 2, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_6() {
        let date = Date::from_ymd(2024, 2, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_7() {
        let date = Date::from_ymd(2024, 2, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_8() {
        let date = Date::from_ymd(2024, 2, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_9() {
        let date = Date::from_ymd(2024, 2, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_10() {
        let date = Date::from_ymd(2024, 2, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Epiphany5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_11() {
        let date = Date::from_ymd(2024, 2, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_12() {
        let date = Date::from_ymd(2024, 2, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_13() {
        let date = Date::from_ymd(2024, 2, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::LastEpiphany, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_14() {
        let date = Date::from_ymd(2024, 2, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_15() {
        let date = Date::from_ymd(2024, 2, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThursdayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThursdayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_16() {
        let date = Date::from_ymd(2024, 2, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_17() {
        let date = Date::from_ymd(2024, 2, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAshWednesday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAshWednesday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_18() {
        let date = Date::from_ymd(2024, 2, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_19() {
        let date = Date::from_ymd(2024, 2, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_20() {
        let date = Date::from_ymd(2024, 2, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_21() {
        let date = Date::from_ymd(2024, 2, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_22() {
        let date = Date::from_ymd(2024, 2, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_23() {
        let date = Date::from_ymd(2024, 2, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent1, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_24() {
        let date = Date::from_ymd(2024, 2, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Matthias));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Matthias));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_25() {
        let date = Date::from_ymd(2024, 2, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_26() {
        let date = Date::from_ymd(2024, 2, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_27() {
        let date = Date::from_ymd(2024, 2, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_28() {
        let date = Date::from_ymd(2024, 2, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_2_29() {
        let date = Date::from_ymd(2024, 2, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_1() {
        let date = Date::from_ymd(2024, 3, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_2() {
        let date = Date::from_ymd(2024, 3, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_3() {
        let date = Date::from_ymd(2024, 3, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_4() {
        let date = Date::from_ymd(2024, 3, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_5() {
        let date = Date::from_ymd(2024, 3, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_6() {
        let date = Date::from_ymd(2024, 3, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_7() {
        let date = Date::from_ymd(2024, 3, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_8() {
        let date = Date::from_ymd(2024, 3, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_9() {
        let date = Date::from_ymd(2024, 3, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_10() {
        let date = Date::from_ymd(2024, 3, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_11() {
        let date = Date::from_ymd(2024, 3, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_12() {
        let date = Date::from_ymd(2024, 3, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_13() {
        let date = Date::from_ymd(2024, 3, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_14() {
        let date = Date::from_ymd(2024, 3, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_15() {
        let date = Date::from_ymd(2024, 3, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_16() {
        let date = Date::from_ymd(2024, 3, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_17() {
        let date = Date::from_ymd(2024, 3, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_18() {
        let date = Date::from_ymd(2024, 3, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_19() {
        let date = Date::from_ymd(2024, 3, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Joseph));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Joseph));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_20() {
        let date = Date::from_ymd(2024, 3, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_21() {
        let date = Date::from_ymd(2024, 3, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_22() {
        let date = Date::from_ymd(2024, 3, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_23() {
        let date = Date::from_ymd(2024, 3, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Lent5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_24() {
        let date = Date::from_ymd(2024, 3, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::PalmSunday));
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::HolyWeek,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::PalmSunday));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::HolyWeek,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2024_3_25() {
        let date = Date::from_ymd(2024, 3, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MondayInHolyWeek)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::Feast(Feast::Annunciation))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MondayInHolyWeek)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::Annunciation))
        );
    }
    #[test]
    fn test_calendar_for_2024_3_26() {
        let date = Date::from_ymd(2024, 3, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_27() {
        let date = Date::from_ymd(2024, 3, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInHolyWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInHolyWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_28() {
        let date = Date::from_ymd(2024, 3, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MaundyThursday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MaundyThursday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_29() {
        let date = Date::from_ymd(2024, 3, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::GoodFriday));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::GoodFriday));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_30() {
        let date = Date::from_ymd(2024, 3, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::HolySaturday)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::HolySaturday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_3_31() {
        let date = Date::from_ymd(2024, 3, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::EasterSunday)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EasterSunday)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2024_4_1() {
        let date = Date::from_ymd(2024, 4, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MondayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MondayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_2() {
        let date = Date::from_ymd(2024, 4, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TuesdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_3() {
        let date = Date::from_ymd(2024, 4, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::WednesdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_4() {
        let date = Date::from_ymd(2024, 4, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::ThursdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::ThursdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_5() {
        let date = Date::from_ymd(2024, 4, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_6() {
        let date = Date::from_ymd(2024, 4, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayInEasterWeek)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayInEasterWeek)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_7() {
        let date = Date::from_ymd(2024, 4, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_8() {
        let date = Date::from_ymd(2024, 4, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::Annunciation)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter2,
                Weekday::Mon
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::Annunciation)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::WeekAndDay(
                LiturgicalWeek::Easter2,
                Weekday::Mon
            ))
        );
    }
    #[test]
    fn test_calendar_for_2024_4_9() {
        let date = Date::from_ymd(2024, 4, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_10() {
        let date = Date::from_ymd(2024, 4, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_11() {
        let date = Date::from_ymd(2024, 4, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_12() {
        let date = Date::from_ymd(2024, 4, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_13() {
        let date = Date::from_ymd(2024, 4, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter2, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_14() {
        let date = Date::from_ymd(2024, 4, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_15() {
        let date = Date::from_ymd(2024, 4, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_16() {
        let date = Date::from_ymd(2024, 4, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_17() {
        let date = Date::from_ymd(2024, 4, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_18() {
        let date = Date::from_ymd(2024, 4, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_19() {
        let date = Date::from_ymd(2024, 4, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_20() {
        let date = Date::from_ymd(2024, 4, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_21() {
        let date = Date::from_ymd(2024, 4, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_22() {
        let date = Date::from_ymd(2024, 4, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_23() {
        let date = Date::from_ymd(2024, 4, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_24() {
        let date = Date::from_ymd(2024, 4, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_25() {
        let date = Date::from_ymd(2024, 4, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Mark));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Mark));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_26() {
        let date = Date::from_ymd(2024, 4, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_27() {
        let date = Date::from_ymd(2024, 4, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_28() {
        let date = Date::from_ymd(2024, 4, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_29() {
        let date = Date::from_ymd(2024, 4, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_4_30() {
        let date = Date::from_ymd(2024, 4, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_1() {
        let date = Date::from_ymd(2024, 5, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::PhilipAndJames)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::PhilipAndJames)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_2() {
        let date = Date::from_ymd(2024, 5, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_3() {
        let date = Date::from_ymd(2024, 5, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_4() {
        let date = Date::from_ymd(2024, 5, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_5() {
        let date = Date::from_ymd(2024, 5, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_6() {
        let date = Date::from_ymd(2024, 5, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_7() {
        let date = Date::from_ymd(2024, 5, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_8() {
        let date = Date::from_ymd(2024, 5, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_9() {
        let date = Date::from_ymd(2024, 5, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AscensionDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AscensionDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_10() {
        let date = Date::from_ymd(2024, 5, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAscension)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::FridayAfterAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_11() {
        let date = Date::from_ymd(2024, 5, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAscension)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SaturdayAfterAscension)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_12() {
        let date = Date::from_ymd(2024, 5, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_13() {
        let date = Date::from_ymd(2024, 5, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_14() {
        let date = Date::from_ymd(2024, 5, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_15() {
        let date = Date::from_ymd(2024, 5, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_16() {
        let date = Date::from_ymd(2024, 5, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_17() {
        let date = Date::from_ymd(2024, 5, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_18() {
        let date = Date::from_ymd(2024, 5, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::WeekAndDay(LiturgicalWeek::Easter7, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfPentecost)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_19() {
        let date = Date::from_ymd(2024, 5, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Pentecost));
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Sun))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Pentecost));
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Sun))
        );
    }
    #[test]
    fn test_calendar_for_2024_5_20() {
        let date = Date::from_ymd(2024, 5, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_21() {
        let date = Date::from_ymd(2024, 5, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_22() {
        let date = Date::from_ymd(2024, 5, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_23() {
        let date = Date::from_ymd(2024, 5, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_24() {
        let date = Date::from_ymd(2024, 5, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_25() {
        let date = Date::from_ymd(2024, 5, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper2, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTrinitySunday)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_26() {
        let date = Date::from_ymd(2024, 5, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TrinitySunday)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Sun))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TrinitySunday)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Sun))
        );
    }
    #[test]
    fn test_calendar_for_2024_5_27() {
        let date = Date::from_ymd(2024, 5, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_28() {
        let date = Date::from_ymd(2024, 5, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_29() {
        let date = Date::from_ymd(2024, 5, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_30() {
        let date = Date::from_ymd(2024, 5, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheVisitation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_5_31() {
        let date = Date::from_ymd(2024, 5, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TheVisitation)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TheVisitation)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_1() {
        let date = Date::from_ymd(2024, 6, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper3, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_2() {
        let date = Date::from_ymd(2024, 6, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_3() {
        let date = Date::from_ymd(2024, 6, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_4() {
        let date = Date::from_ymd(2024, 6, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_5() {
        let date = Date::from_ymd(2024, 6, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_6() {
        let date = Date::from_ymd(2024, 6, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_7() {
        let date = Date::from_ymd(2024, 6, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_8() {
        let date = Date::from_ymd(2024, 6, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper4, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_9() {
        let date = Date::from_ymd(2024, 6, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_10() {
        let date = Date::from_ymd(2024, 6, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_11() {
        let date = Date::from_ymd(2024, 6, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Barnabas));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Barnabas));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_12() {
        let date = Date::from_ymd(2024, 6, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_13() {
        let date = Date::from_ymd(2024, 6, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_14() {
        let date = Date::from_ymd(2024, 6, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_15() {
        let date = Date::from_ymd(2024, 6, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper5, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_16() {
        let date = Date::from_ymd(2024, 6, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_17() {
        let date = Date::from_ymd(2024, 6, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_18() {
        let date = Date::from_ymd(2024, 6, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_19() {
        let date = Date::from_ymd(2024, 6, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_20() {
        let date = Date::from_ymd(2024, 6, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_21() {
        let date = Date::from_ymd(2024, 6, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_22() {
        let date = Date::from_ymd(2024, 6, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper6, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_23() {
        let date = Date::from_ymd(2024, 6, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Sun)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::EveOfStJohnTheBaptist))
        );
    }
    #[test]
    fn test_calendar_for_2024_6_24() {
        let date = Date::from_ymd(2024, 6, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::NativityOfStJohnTheBaptist)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::NativityOfStJohnTheBaptist)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_25() {
        let date = Date::from_ymd(2024, 6, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_26() {
        let date = Date::from_ymd(2024, 6, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_27() {
        let date = Date::from_ymd(2024, 6, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_28() {
        let date = Date::from_ymd(2024, 6, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper7, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_29() {
        let date = Date::from_ymd(2024, 6, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::PeterAndPaul)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::PeterAndPaul)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_6_30() {
        let date = Date::from_ymd(2024, 6, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_1() {
        let date = Date::from_ymd(2024, 7, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_2() {
        let date = Date::from_ymd(2024, 7, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_3() {
        let date = Date::from_ymd(2024, 7, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_4() {
        let date = Date::from_ymd(2024, 7, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::IndependenceDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::IndependenceDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_5() {
        let date = Date::from_ymd(2024, 7, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_6() {
        let date = Date::from_ymd(2024, 7, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper8, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_7() {
        let date = Date::from_ymd(2024, 7, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_8() {
        let date = Date::from_ymd(2024, 7, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_9() {
        let date = Date::from_ymd(2024, 7, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_10() {
        let date = Date::from_ymd(2024, 7, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_11() {
        let date = Date::from_ymd(2024, 7, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_12() {
        let date = Date::from_ymd(2024, 7, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_13() {
        let date = Date::from_ymd(2024, 7, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper9, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_14() {
        let date = Date::from_ymd(2024, 7, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_15() {
        let date = Date::from_ymd(2024, 7, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_16() {
        let date = Date::from_ymd(2024, 7, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_17() {
        let date = Date::from_ymd(2024, 7, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_18() {
        let date = Date::from_ymd(2024, 7, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_19() {
        let date = Date::from_ymd(2024, 7, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_20() {
        let date = Date::from_ymd(2024, 7, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper10, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_21() {
        let date = Date::from_ymd(2024, 7, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_22() {
        let date = Date::from_ymd(2024, 7, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::MaryMagdalene)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::MaryMagdalene)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_23() {
        let date = Date::from_ymd(2024, 7, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_24() {
        let date = Date::from_ymd(2024, 7, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_25() {
        let date = Date::from_ymd(2024, 7, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::James));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::James));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_26() {
        let date = Date::from_ymd(2024, 7, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_27() {
        let date = Date::from_ymd(2024, 7, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper11, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_28() {
        let date = Date::from_ymd(2024, 7, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_29() {
        let date = Date::from_ymd(2024, 7, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_30() {
        let date = Date::from_ymd(2024, 7, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_7_31() {
        let date = Date::from_ymd(2024, 7, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_1() {
        let date = Date::from_ymd(2024, 8, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_2() {
        let date = Date::from_ymd(2024, 8, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_3() {
        let date = Date::from_ymd(2024, 8, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper12, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_4() {
        let date = Date::from_ymd(2024, 8, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_5() {
        let date = Date::from_ymd(2024, 8, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfTheTransfiguration)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_6() {
        let date = Date::from_ymd(2024, 8, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::TheTransfiguration)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::TheTransfiguration)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_7() {
        let date = Date::from_ymd(2024, 8, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_8() {
        let date = Date::from_ymd(2024, 8, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_9() {
        let date = Date::from_ymd(2024, 8, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_10() {
        let date = Date::from_ymd(2024, 8, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper13, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_11() {
        let date = Date::from_ymd(2024, 8, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_12() {
        let date = Date::from_ymd(2024, 8, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_13() {
        let date = Date::from_ymd(2024, 8, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_14() {
        let date = Date::from_ymd(2024, 8, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_15() {
        let date = Date::from_ymd(2024, 8, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Mary));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Mary));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_16() {
        let date = Date::from_ymd(2024, 8, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_17() {
        let date = Date::from_ymd(2024, 8, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper14, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_18() {
        let date = Date::from_ymd(2024, 8, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_19() {
        let date = Date::from_ymd(2024, 8, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_20() {
        let date = Date::from_ymd(2024, 8, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_21() {
        let date = Date::from_ymd(2024, 8, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_22() {
        let date = Date::from_ymd(2024, 8, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_23() {
        let date = Date::from_ymd(2024, 8, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper15, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_24() {
        let date = Date::from_ymd(2024, 8, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Bartholomew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Bartholomew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_25() {
        let date = Date::from_ymd(2024, 8, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_26() {
        let date = Date::from_ymd(2024, 8, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_27() {
        let date = Date::from_ymd(2024, 8, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_28() {
        let date = Date::from_ymd(2024, 8, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_29() {
        let date = Date::from_ymd(2024, 8, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_30() {
        let date = Date::from_ymd(2024, 8, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_8_31() {
        let date = Date::from_ymd(2024, 8, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper16, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_1() {
        let date = Date::from_ymd(2024, 9, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_2() {
        let date = Date::from_ymd(2024, 9, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_3() {
        let date = Date::from_ymd(2024, 9, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_4() {
        let date = Date::from_ymd(2024, 9, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_5() {
        let date = Date::from_ymd(2024, 9, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_6() {
        let date = Date::from_ymd(2024, 9, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_7() {
        let date = Date::from_ymd(2024, 9, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper17, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_8() {
        let date = Date::from_ymd(2024, 9, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_9() {
        let date = Date::from_ymd(2024, 9, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_10() {
        let date = Date::from_ymd(2024, 9, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_11() {
        let date = Date::from_ymd(2024, 9, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_12() {
        let date = Date::from_ymd(2024, 9, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_13() {
        let date = Date::from_ymd(2024, 9, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper18, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfHolyCross)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_14() {
        let date = Date::from_ymd(2024, 9, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::HolyCross));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::HolyCross));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_15() {
        let date = Date::from_ymd(2024, 9, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_16() {
        let date = Date::from_ymd(2024, 9, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_17() {
        let date = Date::from_ymd(2024, 9, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_18() {
        let date = Date::from_ymd(2024, 9, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_19() {
        let date = Date::from_ymd(2024, 9, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_20() {
        let date = Date::from_ymd(2024, 9, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper19, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_21() {
        let date = Date::from_ymd(2024, 9, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Matthew));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Matthew));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_22() {
        let date = Date::from_ymd(2024, 9, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_23() {
        let date = Date::from_ymd(2024, 9, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_24() {
        let date = Date::from_ymd(2024, 9, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_25() {
        let date = Date::from_ymd(2024, 9, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_26() {
        let date = Date::from_ymd(2024, 9, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_27() {
        let date = Date::from_ymd(2024, 9, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_28() {
        let date = Date::from_ymd(2024, 9, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper20, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_9_29() {
        let date = Date::from_ymd(2024, 9, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sun)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::Feast(Feast::Michael))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sun)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::Feast(Feast::Michael))
        );
    }
    #[test]
    fn test_calendar_for_2024_9_30() {
        let date = Date::from_ymd(2024, 9, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::Michael)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper21,
                Weekday::Mon
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::Michael)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper21,
                Weekday::Mon
            ))
        );
    }
    #[test]
    fn test_calendar_for_2024_10_1() {
        let date = Date::from_ymd(2024, 10, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_2() {
        let date = Date::from_ymd(2024, 10, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_3() {
        let date = Date::from_ymd(2024, 10, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_4() {
        let date = Date::from_ymd(2024, 10, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_5() {
        let date = Date::from_ymd(2024, 10, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper21, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_6() {
        let date = Date::from_ymd(2024, 10, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_7() {
        let date = Date::from_ymd(2024, 10, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_8() {
        let date = Date::from_ymd(2024, 10, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_9() {
        let date = Date::from_ymd(2024, 10, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_10() {
        let date = Date::from_ymd(2024, 10, 10);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_11() {
        let date = Date::from_ymd(2024, 10, 11);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_12() {
        let date = Date::from_ymd(2024, 10, 12);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper22, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_13() {
        let date = Date::from_ymd(2024, 10, 13);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_14() {
        let date = Date::from_ymd(2024, 10, 14);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_15() {
        let date = Date::from_ymd(2024, 10, 15);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_16() {
        let date = Date::from_ymd(2024, 10, 16);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_17() {
        let date = Date::from_ymd(2024, 10, 17);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_18() {
        let date = Date::from_ymd(2024, 10, 18);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(morning.observed, LiturgicalDayId::Feast(Feast::Luke));
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(evening.observed, LiturgicalDayId::Feast(Feast::Luke));
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_19() {
        let date = Date::from_ymd(2024, 10, 19);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper23, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_20() {
        let date = Date::from_ymd(2024, 10, 20);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_21() {
        let date = Date::from_ymd(2024, 10, 21);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_22() {
        let date = Date::from_ymd(2024, 10, 22);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_23() {
        let date = Date::from_ymd(2024, 10, 23);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::JamesOfJerusalem)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::JamesOfJerusalem)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_24() {
        let date = Date::from_ymd(2024, 10, 24);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_25() {
        let date = Date::from_ymd(2024, 10, 25);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_26() {
        let date = Date::from_ymd(2024, 10, 26);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper24, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_27() {
        let date = Date::from_ymd(2024, 10, 27);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sun)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sun)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_28() {
        let date = Date::from_ymd(2024, 10, 28);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::SimonAndJude)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::SimonAndJude)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_29() {
        let date = Date::from_ymd(2024, 10, 29);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_30() {
        let date = Date::from_ymd(2024, 10, 30);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_10_31() {
        let date = Date::from_ymd(2024, 10, 31);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::EveOfAllSaints)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_1() {
        let date = Date::from_ymd(2024, 11, 1);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::Feast(Feast::AllSaintsDay)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::Feast(Feast::AllSaintsDay)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_2() {
        let date = Date::from_ymd(2024, 11, 2);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper25, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_3() {
        let date = Date::from_ymd(2024, 11, 3);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::TransferredFeast(Feast::AllSaintsDay)
        );
        assert_eq!(
            morning.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper26,
                Weekday::Sun
            ))
        );
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::TransferredFeast(Feast::AllSaintsDay)
        );
        assert_eq!(
            evening.alternate,
            Some(LiturgicalDayId::ProperAndDay(
                Proper::Proper26,
                Weekday::Sun
            ))
        );
    }
    #[test]
    fn test_calendar_for_2024_11_4() {
        let date = Date::from_ymd(2024, 11, 4);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Mon)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Mon)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_5() {
        let date = Date::from_ymd(2024, 11, 5);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Tue)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Tue)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_6() {
        let date = Date::from_ymd(2024, 11, 6);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Wed)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Wed)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_7() {
        let date = Date::from_ymd(2024, 11, 7);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Thu)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Thu)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_8() {
        let date = Date::from_ymd(2024, 11, 8);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Fri)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Fri)
        );
        assert_eq!(evening.alternate, None);
    }
    #[test]
    fn test_calendar_for_2024_11_9() {
        let date = Date::from_ymd(2024, 11, 9);
        let morning = BCP1979_CALENDAR.liturgical_day(date, false);
        assert_eq!(
            morning.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sat)
        );
        assert_eq!(morning.alternate, None);
        let evening = BCP1979_CALENDAR.liturgical_day(date, true);
        assert_eq!(
            evening.observed,
            LiturgicalDayId::ProperAndDay(Proper::Proper26, Weekday::Sat)
        );
        assert_eq!(evening.alternate, None);
    }
}
